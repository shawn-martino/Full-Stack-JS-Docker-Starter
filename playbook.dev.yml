---
- hosts: localhost
  tasks:
    # Docker Network enables communication between containers
    - name: Create a network
      docker_network:
        name: full_stack_app

    # Postgres DB Official Container from Docker Hub
    # TODO:
    # - Add data persistence
    - name: Run Postgres container
      docker_container:
        name: 'postgres'
        recreate: true
        restart_policy: unless-stopped
        image: 'postgres:latest'
        state: started
        networks:
          - name: 'full_stack_app'

    # NGINX Official Container from Docker Hub
    # TODO:
    # - Add local domain name (eg. example.local)
    # - Add local SSL for dev
    - name: Run Nginx container
      docker_container:
        name: 'nginx'
        recreate: true
        restart_policy: always
        image: 'nginx:latest'
        state: started
        published_ports:
          - '3050:80'
        volumes:
          - './nginx/dev/dev.default.conf:/etc/nginx/conf.d/default.conf'
        networks:
          - name: 'full_stack_app'

    # Backend Docker Image
    - name: Build Backend image
      docker_image:
        name: backend_image
        source: build
        build:
          dockerfile: Dockerfile.dev
          path: ./backend

    # Backend Container Setup
    # TODO:
    # - Add env vars to ansible vault
    - name: Running the Backend container
      docker_container:
        name: backend
        image: 'backend_image:latest'
        state: started
        volumes:
          - '/app/node_modules'
          - './backend:/app'
        env:
          REDIS_HOST: 'redis'
          REDIS_PORT: '6379'
          PGUSER: 'postgres'
          PGHOST: 'postgres'
          PGDATABASE: 'postgres'
          PGPASSWORD: 'postgres_password'
          PGPORT: '5432'
        networks:
          - name: 'full_stack_app'

    # Frontend Docker Image
    - name: Build Frontend image
      docker_image:
        name: frontend_image
        build:
          dockerfile: Dockerfile.dev
          path: ./frontend

    # Frontend Container Setup
    - name: Running the Frontend container
      docker_container:
        name: frontend
        image: 'frontend_image:latest'
        state: started
        volumes:
          - /app/node_modules
          - ./frontend:/app
        networks:
          - name: 'full_stack_app'
